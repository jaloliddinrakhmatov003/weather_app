{"version":3,"sources":["module.js"],"names":["weekDayNames","monthNames","getDate","dateUnix","timezone","date","Date","weekDayName","getUTCDay","monthName","getUTCMonth","getUTCDate","getTime","timeUnix","hours","getUTCHours","minutes","getMinutes","period","getHours","mps_to_km","mps","mph","aqiText","level","message"],"mappings":"AAAA;;;;;;AAOA;;;;;;AAEO,IAAMA,YAAY,GAAG,CAC1B,QAD0B,EAE1B,QAF0B,EAG1B,SAH0B,EAI1B,WAJ0B,EAK1B,UAL0B,EAM1B,QAN0B,EAO1B,UAP0B,CAArB;;AAUA,IAAMC,UAAU,GAAG,CACxB,KADwB,EAExB,KAFwB,EAGxB,KAHwB,EAIxB,KAJwB,EAKxB,KALwB,EAMxB,KANwB,EAOxB,KAPwB,EAQxB,KARwB,EASxB,KATwB,EAUxB,KAVwB,EAWxB,KAXwB,EAYxB,KAZwB,CAAnB;AAeP;;;;;;;;;AAMO,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAAUC,QAAV,EAAoBC,QAApB,EAA8B;AACnD,MAAMC,IAAI,GAAG,IAAIC,IAAJ,CAAS,CAACH,QAAQ,GAAGC,QAAZ,IAAwB,IAAjC,CAAb;AACA,MAAMG,WAAW,GAAGP,YAAY,CAACK,IAAI,CAACG,SAAL,EAAD,CAAhC;AACA,MAAMC,SAAS,GAAGR,UAAU,CAACI,IAAI,CAACK,WAAL,EAAD,CAA5B;AAEA,mBAAUH,WAAV,cAAyBF,IAAI,CAACM,UAAL,EAAzB,eAA+CF,SAA/C;AACD,CANM;AAQP;;;;;;;;;;AAMO,IAAMG,OAAO,GAAG,SAAVA,OAAU,CAAUC,QAAV,EAAoBT,QAApB,EAA8B;AACnD,MAAMC,IAAI,GAAG,IAAIC,IAAJ,CAAS,CAACO,QAAQ,GAAGT,QAAZ,IAAwB,IAAjC,CAAb;AACA,MAAMU,KAAK,GAAGT,IAAI,CAACU,WAAL,EAAd;AACA,MAAMC,OAAO,GAAGX,IAAI,CAACY,UAAL,EAAhB;AACA,MAAMC,MAAM,GAAGJ,KAAK,IAAI,EAAT,GAAc,IAAd,GAAqB,IAApC;AAEA,mBAAUA,KAAK,GAAG,EAAR,IAAc,EAAxB,cAA8BE,OAA9B,cAAyCE,MAAzC;AACD,CAPM;AASP;;;;;;;;;;AAMO,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAAUN,QAAV,EAAoBT,QAApB,EAA8B;AACpD,MAAMC,IAAI,GAAG,IAAIC,IAAJ,CAAS,CAACO,QAAQ,GAAGT,QAAZ,IAAwB,IAAjC,CAAb;AACA,MAAMU,KAAK,GAAGT,IAAI,CAACU,WAAL,EAAd;AACA,MAAMG,MAAM,GAAGJ,KAAK,IAAI,EAAT,GAAc,IAAd,GAAqB,IAApC;AAEA,mBAAUA,KAAK,GAAG,EAAR,IAAc,EAAxB,cAA8BI,MAA9B;AACD,CANM;AAQP;;;;;;;;;AAKO,IAAME,SAAS,GAAG,SAAZA,SAAY,CAACC,GAAD,EAAS;AAChC,MAAMC,GAAG,GAAGD,GAAG,GAAG,IAAlB;AAEA,SAAOC,GAAG,GAAG,IAAb;AACD,CAJM;;;AAMA,IAAMC,OAAO,GAAG;AACrB,KAAG;AACDC,IAAAA,KAAK,EAAE,MADN;AAEDC,IAAAA,OAAO,EACL;AAHD,GADkB;AAMrB,KAAG;AACDD,IAAAA,KAAK,EAAE,MADN;AAEDC,IAAAA,OAAO,EACL;AAHD,GANkB;AAWrB,KAAG;AACDD,IAAAA,KAAK,EAAE,UADN;AAEDC,IAAAA,OAAO,EACL;AAHD,GAXkB;AAgBrB,KAAG;AACDD,IAAAA,KAAK,EAAE,MADN;AAEDC,IAAAA,OAAO,EACL;AAHD,GAhBkB;AAsBrB,KAAG;AACDD,IAAAA,KAAK,EAAE,WADN;AAEDC,IAAAA,OAAO,EACL;AAHD;AAtBkB,CAAhB","sourcesContent":["/**\n * @license MIT\n * @fileoverview All module functions\n * @copyright codewithsadee 2023 All rights reserved\n * @author codewithsadee <mohammadsadee24@gmail.com>\n */\n\n\"use strict\";\n\nexport const weekDayNames = [\n  \"Sunday\",\n  \"Monday\",\n  \"Tuesday\",\n  \"Wednesday\",\n  \"Thursday\",\n  \"Friday\",\n  \"Saturday\",\n];\n\nexport const monthNames = [\n  \"Jan\",\n  \"Feb\",\n  \"Mar\",\n  \"Apr\",\n  \"May\",\n  \"Jun\",\n  \"Jul\",\n  \"Aug\",\n  \"Sep\",\n  \"Oct\",\n  \"Nov\",\n  \"Dec\",\n];\n\n/**\n *\n * @param {number} dateUnix Unix date in seconds\n * @param {number} timezone Timezone shift from UTC in seconds\n * @returns {string} Date string. formate: \"Sunday 10, Jan\"\n */\nexport const getDate = function (dateUnix, timezone) {\n  const date = new Date((dateUnix + timezone) * 1000);\n  const weekDayName = weekDayNames[date.getUTCDay()];\n  const monthName = monthNames[date.getUTCMonth()];\n\n  return `${weekDayName} ${date.getUTCDate()}, ${monthName}`;\n};\n\n/**\n *\n * @param {number} timeUnix Unix date in seconds\n * @param {number} timezone Timezone shift from UTC in seconds\n * @returns {string} Time string. formate: \"HH:MM AM/PM\"\n */\nexport const getTime = function (timeUnix, timezone) {\n  const date = new Date((timeUnix + timezone) * 1000);\n  const hours = date.getUTCHours();\n  const minutes = date.getMinutes();\n  const period = hours >= 12 ? \"PM\" : \"AM\";\n\n  return `${hours % 12 || 12}:${minutes} ${period}`;\n};\n\n/**\n *\n * @param {number} timeUnix Unix date in seconds\n * @param {number} timezone Timezone shift from UTC in seconds\n * @returns {string} Time string. formate: \"HH AM/PM\"\n */\nexport const getHours = function (timeUnix, timezone) {\n  const date = new Date((timeUnix + timezone) * 1000);\n  const hours = date.getUTCHours();\n  const period = hours >= 12 ? \"PM\" : \"AM\";\n\n  return `${hours % 12 || 12} ${period}`;\n};\n\n/**\n *\n * @param {number} mps Meter per seconds\n * @returns {number} Kilometer per hours\n */\nexport const mps_to_km = (mps) => {\n  const mph = mps * 3600;\n\n  return mph / 1000;\n};\n\nexport const aqiText = {\n  1: {\n    level: \"Good\",\n    message:\n      \"Air quality is considered satisfactory, and air pollution poses little or no risk\",\n  },\n  2: {\n    level: \"Fair\",\n    message:\n      \"Air quality is acceptable; however, for some pollutants there may be a moderate health concern for a very small number of people who are unusually sensitive to air pollution\",\n  },\n  3: {\n    level: \"Moderate\",\n    message:\n      \"AMembers of sensitive  groups may experience health effects. The general public is not likely to be affected\",\n  },\n  4: {\n    level: \"Poor\",\n    message:\n      \"Everyone may begin to experience health effects; members of sensitive groups may experience more serious health effects\",\n  },\n\n  5: {\n    level: \"Very poor\",\n    message:\n      \"Health warnings of emergency conditions. The entire population is more likely to be affected.\",\n  },\n};\n"],"file":"module.dev.js"}